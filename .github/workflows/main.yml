name: Workflow
on:
  push:
    branches:
      - feature-seguridad

jobs:
  SAST:
    runs-on: ubuntu-24.04

    steps:
      # Clonar el repositorio
      - name: Checkout Code
        uses: actions/checkout@v4

      # Verificar si el Proyecto Existe en SonarCloud
      - name: Check if Project Exists
        id: check_project
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
          -u "${{ secrets.SONAR_TOKEN }}:" \
          "https://sonarcloud.io/api/projects/search?projects=${{ secrets.SONAR_PROJECT_KEY }}")

          if [ "$RESPONSE" == "200" ]; then
            echo "PROJECT_EXISTS=true" >> $GITHUB_ENV
          else
            echo "PROJECT_EXISTS=false" >> $GITHUB_ENV
          fi

      # Crear el Proyecto Solo si No Existe
      - name: Create Project on SonarCloud (if not exists)
        if: env.PROJECT_EXISTS == 'false'
        run: |
          curl -X POST "https://sonarcloud.io/api/projects/create" \
          -u "${{ secrets.SONAR_TOKEN }}:" \
          -d "organization=${{ secrets.SONAR_ORGANIZATION }}" \
          -d "name=${{ github.repository }}" \
          -d "project=${{ secrets.SONAR_PROJECT_KEY }}"
          echo "Proyecto creado en SonarCloud."

      # Confirmar que el Proyecto ya Existía
      - name: Project Already Exists
        if: env.PROJECT_EXISTS == 'true'
        run: echo "El proyecto ya existe en SonarCloud."

      # Configurar Node.js para Proyectos TypeScript
      - name: Setup Node.js and TypeScript
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Instalar Dependencias y Compilar TypeScript
      - name: Install Dependencies and Build
        run: |
          npm ci
          npm run build

      # Instalar y Validar SonarScanner CLI usando `curl`
      - name: Install SonarScanner CLI with CURL
        run: |
          # Instalar herramientas faltantes si es necesario
          sudo apt-get update && sudo apt-get install -y curl unzip
          
          # Descargar SonarScanner CLI con validación
          echo "Descargando SonarScanner CLI..."
          curl -L "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610-linux.zip" -o sonar-scanner-cli.zip

          # Validar si el archivo fue descargado correctamente
          if [ ! -f sonar-scanner-cli.zip ]; then
            echo "Error: Archivo no encontrado después de la descarga."
            exit 1
          fi

          # Descomprimir el archivo ZIP y validar éxito
          unzip sonar-scanner-cli.zip -d sonar-scanner
          if [ $? -ne 0 ]; then
            echo "Error: Fallo al descomprimir SonarScanner CLI."
            exit 1
          fi

          # Asignar permisos y añadir al PATH
          chmod +x sonar-scanner/sonar-scanner-6.2.1.4610-linux/bin/sonar-scanner
          echo "$(pwd)/sonar-scanner/sonar-scanner-6.2.1.4610-linux/bin" >> $GITHUB_PATH

      # Ejecutar el Análisis con SonarCloud usando el CLI
      - name: Run SonarCloud Analysis with CURL
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.sources=src \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # Validar Quality Gate y Falla el Pipeline si No Se Cumple
      - name: Validate SonarCloud Quality Gate
        run: |
          STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}" | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $STATUS"
          if [ "$STATUS" != "OK" ]; then
            echo "Quality Gate Failed. Please check SonarCloud for details."
            exit 1
          fi